ptst1 <- subset(test, TotalIntench2==23,000 & FiberWidthCh1==10 & PerimStatusCh1==2)
ptst2 <- subset(test, TotalIntench2==50,000 & FiberWidthCh1==10 & VarIntenCh4==100)
ptst3 <- subset(test, TotalIntench2==57,000 & FiberWidthCh1==8  & VarIntenCh4==100)
ptst4 <- subset(test, FiberWidthCh1==8      & VarIntenCh4==100  & PerimStatusCh1==2)
names(test)
ptst1 <- subset(test, TotalIntenCh2==23,000 & FiberWidthCh1==10 & PerimStatusCh1==2)
ptst2 <- subset(test, TotalIntenCh2==50,000 & FiberWidthCh1==10 & VarIntenCh4==100)
ptst3 <- subset(test, TotalIntenCh2==57,000 & FiberWidthCh1==8  & VarIntenCh4==100)
ptst4 <- subset(test, FiberWidthCh1==8      & VarIntenCh4==100  & PerimStatusCh1==2)
dim(ptst1)
dim(ptst2)
ptst1
ptst2
ptst3
ptst4
CARTpt1 <- predict(CARTfit, newdada=data.frame(TotalIntenCh2=23,000, FiberWidthCh1=10, PerimStatusCh1=2))
c<- data.frame(TotalIntenCh2=23,000, FiberWidthCh1=10, PerimStatusCh1=2)
c
c
c<- data.frame(TotalIntenCh2=23000, FiberWidthCh1=10, PerimStatusCh1=2)
c
CARTpt1 <- predict(CARTfit, newdada=data.frame(TotalIntenCh2=23000, FiberWidthCh1=10, PerimStatusCh1=2))
ptst1 <- data.frame(TotalIntenCh2=23000, FiberWidthCh1=10, PerimStatusCh1=2)
CARTpt1 <- predict(CARTfit, newdada=ptst1)
ptst1
ptst1 <- data.frame(TotalIntenCh2=23000, FiberWidthCh1=10, PerimStatusCh1=2)
ptst2 <- data.frame(TotalIntenCh2=50000, FiberWidthCh1=10, VarIntenCh4=100)
ptst3 <- data.frame(TotalIntenCh2=57000, FiberWidthCh1=8, VarIntenCh4=100)
ptst4 <- data.frame(FiberWidthCh1==8, VarIntenCh4=100, PerimStatusCh1=2)
ptst1 <- data.frame(TotalIntenCh2=23000, FiberWidthCh1=10, PerimStatusCh1=2)
ptst2 <- data.frame(TotalIntenCh2=50000, FiberWidthCh1=10, VarIntenCh4=100)
ptst3 <- data.frame(TotalIntenCh2=57000, FiberWidthCh1=8, VarIntenCh4=100)
ptst4 <- data.frame(FiberWidthCh1=8, VarIntenCh4=100, PerimStatusCh1=2)
CARTpt1 <- predict(CARTfit, ptst1)
CARTpt1 <- predict(CARTfit, newdata=ptst1)
CARTpt2 <- predict(CARTfit, newdada=ptst2)
summary(CARTfit$finalModel)
str(ptsum)
ptsum <- test[1, ]
str(ptsum)
predict(CARTfit, newdata=ptsum)
ptst1 <- ptsum
ptst2 <- ptsum
ptst3 <- ptsum
ptst4 <- ptsum
ptst1$TotalIntenCh2 <- 23000
ptst1$FiberWidthCh1 <- 10
ptst1$PerimStatusCh1 <- 2
ptst2$TotalIntenCh2 <- 50000
ptst2$FiberWidthCh1 <- 10
ptst2$VarIntenCh4 <- 100
ptst3$TotalIntenCh2 <- 57000
ptst3$FiberWidthCh1 <- 8
ptst3$VarIntenCh4 <- 100
ptst4$FiberWidthCh1 <- 8
ptst4$VarIntenCh4 <- 100
ptst4$PerimStatusCh1 <- 2
predict(CARTfit, newdata=ptst1)
predict(CARTfit, newdada=ptst2)
predict(CARTfit, newdada=ptst3)
predict(CARTfit, newdada=ptst4)
CARTpred <- predict(CARTfit, newdata=test)
table(CARTpred)
dim(ptst1)
dim(ptst2)
dim(ptst3)
dim(ptst4)
ptsum <- test[100, ]
predict(CARTfit, newdata=ptsum)
ptst1 <- ptsum
ptst2 <- ptsum
ptst3 <- ptsum
ptst4 <- ptsum
ptst1$TotalIntenCh2 <- 23000
ptst1$FiberWidthCh1 <- 10
ptst1$PerimStatusCh1 <- 2
ptst2$TotalIntenCh2 <- 50000
ptst2$FiberWidthCh1 <- 10
ptst2$VarIntenCh4 <- 100
ptst3$TotalIntenCh2 <- 57000
ptst3$FiberWidthCh1 <- 8
ptst3$VarIntenCh4 <- 100
ptst4$FiberWidthCh1 <- 8
ptst4$VarIntenCh4 <- 100
ptst4$PerimStatusCh1 <- 2
predict(CARTfit, newdata=ptst1)
predict(CARTfit, newdada=ptst2)
predict(CARTfit, newdada=ptst3)
predict(CARTfit, newdada=ptst4)
CARTpred[100]
print(CARTfit)
plot(CARTfit)
plot(CCARTfit)
text(CARTfit)
post(CARTfit)
print(CARTfit)
summary(CARTfit$finalModel)
str(summary(CARTfit))
plot(CARTfit$finalModel)
print(CARTfit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
data(olive)
str(olive)
olive = olive[,-1]
table(olive$Area)
newdata = as.data.frame(t(colMeans(olive)))
CARTfit2 <- train(Area~., method="rpart", data=olive)
predict(CARTfit2, newdata=newdata)
print(CARTfit2$finalModel)
olive$Area <- as.factor(olive$Area)
newdata = as.data.frame(t(colMeans(olive)))
CARTfit2 <- train(Area~., method="rpart", data=olive)
predict(CARTfit2, newdata=newdata)
print(CARTfit2$finalModel)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
CARTfit2 <- train(Area~., method="rpart", data=olive)
predict(CARTfit2, newdata=newdata)
print(CARTfit2$finalModel)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
str(SAheart)
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
train
dim(train)
length(train)
dim(SAheart)
set.seed(13234)
fit3 <- train(chd~.-sbp-adiposity-famhist, method="glm", family="binomial", data=train)
fit3 <- train(chd~.-sbp-adiposity-famhist, method="glm", family="binomial", data=trainSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
fit3 <- train(chd~.-sbp-adiposity-famhist, method="glm", family="binomial", data=trainSA)
summary(fit3)
missClass = function(trainSA$chd,predict(fit3)){sum(((prediction > 0.5)*1) != values)/length(values)}
predict(fit3)
values <- trainSA$chd
prediction <- predict(fit3)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(trainSA$chd, predict(fit3))
missClass(testSA$chd, predict(fit3, newdata=testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
str(vowel.test)
table(vowel.train$y)
table(vowel.test$y)
set.seed(33833)
fit4 <- train(y~., method="rf", data=vowel.train)
varlmp(fit4)
varimp(fit4)
varImp(fit4)
fit4 <- train(y~., method="rf", data=vowel.train, importance=TRUE)
varImp(fit4)
?varImp()
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
fit4 <- train(y~., method="rf", data=vowel.train, importance=TRUE)
varImp(fit4)
dim(varImp(fit4))
table(vowel.train$y)
?ElemStatLearn
??ElemStatLearn
?ElemStatLearn()
package_version(ElemStatLearn)
package_version("ElemStatLearn")
packageVersion("ElemStatLearn")
install.versions(c("ElemStatLearn"), c("v2012.04-0"))
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
set.seed(33833)
fit1 <- train(y~., method="rf", data=vowel.train)
fit2 <- train(y~., method"gbm", data=vowel.tain)
fit2 <- train(y~., method="gbm", data=vowel.tain)
fit2 <- train(y~., method="gbm", data=vowel.train)
sessionInfo()
pred1 <- predict(fit1, newdata=vowel.test)
pred2 <- predict(fit2, newdata=vowel.test)
acc1 <- pred1==vowel.test$y
acc2 <- pred2==vowel.test$y
acc3 <- (pred1==vowel.test$y)&(pred2==vowel.test$y)
mean(acc1)
mean(acc2)
mean(acc3)
table(pred1)
table(pred1)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
str(vowel.test)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
str(vowel.test)
set.seed(33833)
fit1 <- train(y~., method="rf", data=vowel.train)
fit2 <- train(y~., method="gbm", data=vowel.train)
pred1 <- predict(fit1, newdata=vowel.test)
pred2 <- predict(fit2, newdata=vowel.test)
acc1 <- pred1==vowel.test$y
acc2 <- pred2==vowel.test$y
acc3 <- (pred1==vowel.test$y)&(pred2==vowel.test$y)
mean(acc1)
mean(acc2)
mean(acc3)
acc4 <- pred1==pred2
mean(acc4)
mean(acc3)/mean(acc4)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing <- adData[-inTrain,]
str(adData)
str(AlzheimerDIsease)
str(AlzheimerDisease)
data(AlzheimerDisease)
str(AlzheimerDisease)
view(AlzheimerDisease)
head(AlzheimerDisease)
str(training)
confusionMatrix(pred1, vowel.test$y)
mean(acc1)
confusionMatrix(pred2, vowel.test$y)
mean(acc2)
confusionMatrix(pred1, vowel.test$y[pred1==pred2])
confusionMatrix(pred1[pred1==pred2], vowel.test$y[pred1==pred2])
confusionMatrix(pred2[pred1==pred2], vowel.test$y[pred1==pred2])
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing <- adData[-inTrain,]
set.seed(62433)
fit3 <- train(diagnosis~., method="rf", data=training)
fit4 <- train(diagnosis~., method="gbm", data=training)
fit5 <- train(diagnosis~., method="lda", data=training)
pred3 <- predict(fit3, newdata=testing)
pred4 <- predict(fit4, newdata=testing)
pred5 <- predict(fit5, newdata=testing)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(pred4, testing$diagnosis)
confusionMatrix(pred5, testing$diagnosis)
val <- data.frame(pred3, pred4, pred5, testing$diagnosis)
fit6 <- train(diagnosis~., method="rf", data=val)
pred6 <- predict(fit6)
confusionMatrix(pred6, testing$diagnosis)
length(pred3)
length(pred4)
length(pred5)
length(testing$diagnosis)
dim(val)
str(val)
fit6 <- train(diagnosis~., method="rf", data=val)
val
names(val)
val <- data.frame(pred3, pred4, pred5, diagnosis=testing$diagnosis)
names(val)
fit6 <- train(diagnosis~., method="rf", data=val)
pred6 <- predict(fit6)
confusionMatrix(pred6, testing$diagnosis)
pred6 <- predict(fit6, newdata=testing)
confusionMatrix(pred6, testing$diagnosis)
valt <- data.frame(pred3=fit3$finalModel$predicted, pred4=fit4$finalModel$predicted, pred5=fit5$finalModel$predicted, diagnosis=training$diagnosis)
length(fit3$finalModel$predicted)
length(fit4$finalModel$predicted)
length(fit5$finalModel$predicted)
valt <- data.frame(predict(fit3$finalModel), pred4=predict(fit4$finalModel), pred5=predict(fit5$finalModel), diagnosis=training$diagnosis)
length(predict(fit3$finalModel))
table(predict(fit3$finalModel))
table(predict(fit4$finalModel))
table(predict(fit5$finalModel))
valt <- data.frame(pred3=predict(fit3,training), pred4=predict(fit4,training), pred5=predict(fit5,training), diagnosis=training$diagnosis)
dim(valt)
fit6 <- train(diagnosis~., method="rf", data=valt)
pred6 <- predict(fit6, newdata=testing)
confusionMatrix(pred6, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(pred4, testing$diagnosis)
confusionMatrix(pred5, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training <- concrete[ inTrain,]
testing <- concrete[-inTrain,]
str(training)
str(testing)
str(concrete)
set.seed(233)
fit7 <- train(CompressiveStrength~., method="lasso", data=training)
set.seed(233)
fit7 <- train(CompressiveStrength~., method="lasso", data=training)
plot.enet
plot.enet(fit7)
plot.enet(fit7$finalModel)
plot.enet(fit7$finalModel, xvar="penalty", use.color=TRUE)
pred1 <- predict(fit1, newdata=vowel.test)
pred2 <- predict(fit2, newdata=vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
confusionMatrix(pred2[pred1==pred2], vowel.test$y[pred1==pred2])
set.seed(233)
fit7 <- train(CompressiveStrength~., method="lasso", data=training)
plot.enet(fit7$finalModel, xvar="penalty", use.color=TRUE)
library(lubridate)
dat = read.csv("D:/Data Science Certificate/Course 8_Practical Machine Learning/Assignments/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats()
install.packages("forecast")
?bats()
?forecast()
?"forecast"
str(tstrain)
names(tstain)
names(tstrain)
names(training)
head(training)
fit8 <- bats(tstrain)
?bats
?bats()
install.packages("forecast")
?bats()
library(forecast)
?bats()
fit8 <- bats(tstrain)
pred8 <- forecast.bats(fit8, h=testing$date, level=95)
confusionMatrix(pred8, testing$visitsTumblr)
pred8 <- forecast.bats(fit8, h=nrow(testing), level=95)
confusionMatrix(pred8, testing$visitsTumblr)
accuracy(pred8, testing$visitsTumblr)
acc1 <- pred8==testing$visitsTumblr
mean(acc1)
pred8
head(testing)
length(pred8)
dim(pred8)
length(testing)
dim(testing)
class(pred8)
acc1 <- accuracy(pred8, testing$visitsTumblr)
acc1
acc1 <- (testing$visitsTumblr>=pred8$lower)&(testing$visitsTumbl<=pred8$upper)
mean(acc1)
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
names(training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training <- concrete[ inTrain,]
testing <- concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training <- concrete[ inTrain,]
testing <- concrete[-inTrain,]
names(training)
set.seed(325)
fit9 <- svm(CompressiveStength~., data=training)
pred9 <- predict(fit9, newdata=testing)
accuracy(pred9, testing$CompressiveStrength)
set.seed(325)
library(e1071)
fit9 <- svm(CompressiveStength~., data=training)
pred9 <- predict(fit9, newdata=testing)
accuracy(pred9, testing$CompressiveStrength)
fit9 <- svm(CompressiveStrength~., data=training)
pred9 <- predict(fit9, newdata=testing)
library(forecast)
accuracy(pred9, testing$CompressiveStrength)
pred9
rmse(testing$CompressiveStrength, pred9)
install.packages("Metrics")
library(Metrics)
rmse(testing$CompressiveStrength, pred9)
accuracy(pred9, testing$CompressiveStrength)
confusionMatrix(pred3, testlocal$classe)
library(devtools)
install.packages("Rtools")
install.packages("rtools")
install.packages("Rtools")
library(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
?rCharts
?dTable
?Dtable()
?dTable()
??rCharts
library(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='lujienc', token='A5D4CBF92EF2FDAB9D00F64081FEB8B3', secret='mYVngYpTfEd0QRczSpJkNFKLsrQr80LRcYvSKhz/')
library(shiny)
setwd(D:/Data Science Certificate/Course 9_ Developing Data Products)
setwd(D:/Data Science Certificate/Course 9_Developing Data Products)
setwd(D:\Data Science Certificate\Course 9_ Developing Data Products)
setwd("D:/Data Science Certificate/Course 9_Developing Data Products")
setwd("D:/Data Science Certificate/Course 9_Developing Data Products")
wd()
getwd()
setwd("D:/Data Science Certificate/Course 9_Developing Data Products")
runApp("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
runApp("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
runApp("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
runApp("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
runApp("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
runApp("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
runApp("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
runApp("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
runApp("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
runApp("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install_github('slidify', 'ramnathv')
source('D:/Data Science Certificate/Course 9_ Developing Data Products/Assignments/DDPQuiz3/R/createmean.R')
library(createmean)
View(createmean)
library(DDPQuiz3)
## Reading data
fhall <- read.csv("FH_ALL_19902014.csv", na.strings=c("..",""), skip=2)
head(fhall)
names(fhall)[1] <- "CT"
## Reshaping data
fhall_PR <- fhall[, c("CT", grep("PR", names(fhall), value=TRUE))]
fhall_CL <- fhall[, c("CT", grep("CL", names(fhall), value=TRUE))]
fhall_ST <- fhall[, c("CT", grep("Status", names(fhall), value=TRUE))]
fhall_PRL <- gather(fhall_PR, yrs, prights, PR:PR.24)
fhall_CLL <- gather(fhall_CL, yrs, cliberty, CL:CL.24)
fhall_STL <- gather(fhall_ST, yrs, status, Status:Status.24)
levels(fhall_PRL$yrs) <- c(1990:2014)
levels(fhall_CLL$yrs) <- c(1990:2014)
levels(fhall_STL$yrs) <- c(1990:2014)
fhall_temp <- merge(fhall_PRL, fhall_CLL, by=c("CT", "yrs"))
fhall_final <- merge(fhall_temp, fhall_STL, by=c("CT", "yrs"))
names(fhall_final) <-c("Country", "Years", "Rights", "Liberty", "Status")
fhall_final$Years <- 1989 + as.numeric(fhall_final$Years)
str(fhall_final)
head(fhall_final)
setwd("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
library(dplyr)
library(tidyr)
setwd("D:/Data Science Certificate/Course 9_ Developing Data Products/Projects")
## Reading data
fhall <- read.csv("FH_ALL_19902014.csv", na.strings=c("..",""), skip=2)
head(fhall)
names(fhall)[1] <- "CT"
## Reshaping data
fhall_PR <- fhall[, c("CT", grep("PR", names(fhall), value=TRUE))]
fhall_CL <- fhall[, c("CT", grep("CL", names(fhall), value=TRUE))]
fhall_ST <- fhall[, c("CT", grep("Status", names(fhall), value=TRUE))]
fhall_PRL <- gather(fhall_PR, yrs, prights, PR:PR.24)
fhall_CLL <- gather(fhall_CL, yrs, cliberty, CL:CL.24)
fhall_STL <- gather(fhall_ST, yrs, status, Status:Status.24)
levels(fhall_PRL$yrs) <- c(1990:2014)
levels(fhall_CLL$yrs) <- c(1990:2014)
levels(fhall_STL$yrs) <- c(1990:2014)
fhall_temp <- merge(fhall_PRL, fhall_CLL, by=c("CT", "yrs"))
fhall_final <- merge(fhall_temp, fhall_STL, by=c("CT", "yrs"))
names(fhall_final) <-c("Country", "Years", "Rights", "Liberty", "Status")
fhall_final$Years <- 1989 + as.numeric(fhall_final$Years)
str(fhall_final)
head(fhall_final)
temp <- fhall_final[(fhall_final$Country=="Mexico")&(fhall_final$Years==1990)]
temp <- fhall_final[fhall_final$Country=="Mexico"]
temp <- fhall_final[fhall_final$Country=="Mexico",]
temp
temp <- fhall_final[(fhall_final$Country=="Mexico")&(fhall_final$Years==1990),]
temp
Altogether, this Shiny App covers `r tyrs` years and `r tcts` societies in the world between 1990 and 2014.
